@startuml architecture
allowmixing

file "Cargo.toml" as cargo_toml

package "src" {
    file "main.rs" as main_rs
    class "Main" {
        +main()
    }
    
    file "lib.rs" as lib_rs
    class "McpServer" {
        -server_info: ServerInfo
        -config: ServerConfig
        -prompt_handler: Arc<PromptHandler>
        -tool_handler: Arc<ToolHandler>
        -resource_handler: Arc<ResourceHandler>
        +new(config: ServerConfig) : McpServer
        +start()
        +shutdown()
        +handle_mcp_request(payload: serde_json::Value) : Json<serde_json::Value>
    }
    
    package "handlers" {
        file "prompt_handler.rs" as prompt_handler_rs
        class "PromptHandler" {
            +new() : PromptHandler
            +list_prompts(request: Option<PaginatedRequestParam>) : ListPromptsResult
            +get_prompt(request: GetPromptRequestParam) : GetPromptResult
        }
        
        file "tool_handler.rs" as tool_handler_rs
        class "ToolHandler" {
            +new() : ToolHandler
            +list_tools(request: Option<PaginatedRequestParam>) : ListToolsResult
            +call_tool(request: CallToolRequestParam) : CallToolResult
            +echo_tool(text: String) : String
        }
        class "EchoRequest" {
            +text: String
        }
        
        file "resource_handler.rs" as resource_handler_rs
        class "ResourceHandler" {
            +new() : ResourceHandler
            +list_resources(request: Option<PaginatedRequestParam>) : ListResourcesResult
            +read_resource(request: ReadResourceRequestParam) : ReadResourceResult
        }
    }
    
    file "types.rs" as types_rs
    class "ServerInfo" {
        +name: String
        +version: String
        +capabilities: ServerCapabilities
    }
    class "ServerCapabilities" {
        +tools: bool
        +resources: bool
        +prompts: bool
    }
    class "ServerConfig" {
        +bind_address: String
        +port: u16
        +sse_path: String
        +post_path: String
    }
}

package "tests" {
    file "integration_test.rs" as integration_test_rs
    class "IntegrationTest" {
        +test_server_startup()
        +test_list_tools()
        +test_echo_tool()
        +test_call_tool()
    }
}

package "External Crates" {
    class "rmcp" {
        +ServerHandler
        +SseServer
        +tool_handler
        +ServiceExt
        +RmcpError
        +transport
        +model
    }
    class "tokio" {
        +main
        +spawn
        +sync
    }
    class "serde" {
        +Serialize
        +Deserialize
    }
    class "rmcp_macros" {
        +tool
        +tool_handler
    }
    class "tokio_util" {
        +sync
    }
    class "axum" {
        +Json
        +routing
        +Router
    }
    class "reqwest" {
        +Client
    }
}

Main --> main_rs
McpServer --> lib_rs
PromptHandler --> prompt_handler_rs
ToolHandler --> tool_handler_rs
ResourceHandler --> resource_handler_rs
EchoRequest --> tool_handler_rs
ServerInfo --> types_rs
ServerCapabilities --> types_rs
ServerConfig --> types_rs
IntegrationTest --> integration_test_rs
rmcp --> cargo_toml
tokio --> cargo_toml
serde --> cargo_toml
rmcp_macros --> cargo_toml
tokio_util --> cargo_toml
axum --> cargo_toml
reqwest --> cargo_toml

Main ..> McpServer : creates
Main ..> ServerConfig : creates
McpServer ..> PromptHandler : uses
McpServer ..> ToolHandler : uses
McpServer ..> ResourceHandler : uses
McpServer ..> rmcp : uses
McpServer ..> tokio : uses
McpServer ..> axum : uses
McpServer ..> ServerInfo : uses
McpServer ..> ServerConfig : uses
ToolHandler ..> rmcp : uses
ToolHandler ..> rmcp_macros : uses
ToolHandler ..> EchoRequest : uses
PromptHandler ..> rmcp : uses
ResourceHandler ..> rmcp : uses
IntegrationTest ..> McpServer : uses
IntegrationTest ..> tokio_util : uses
IntegrationTest ..> reqwest : uses

@enduml
